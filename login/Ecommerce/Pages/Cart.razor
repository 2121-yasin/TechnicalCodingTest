@page "/cart"
@using System.Text.Json
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<h1>Cart</h1>

@if (isRendered)
{
@if (cartItems == null || cartItems.Length == 0)
{
    <p>Your cart is empty</p>
}
else
{
   <div class="row">
    @foreach (var item in cartItems)
    {
        <div class="col-lg-3 col-md-6 col-sm-6 d-flex">
            <div class="shadow-lg card w-100 my-2 shadow-2-strong">
                <a href="@($"/details/{item.id}")">
                    <img src="@item.image" alt="@item.name" class="card-img-top" style="aspect-ratio: 1 / 1" />
                </a>
                <div class="card-body d-flex flex-column">
                    <h5 class="card-title">@item.name</h5>
                    <p class="card-text">Price: @item.price</p>
                    <p class="card-text">Quantity: @item.quantity</p>
                    <p class="card-text">Total Price: @item.totalPrice</p>
                    <div class="card-footer d-flex align-items-end pt-3 px-0 pb-0 mt-auto">
                        <a href="" class="btn btn-light border px-3 pt-2 icon-hover mx-4" data-toggle="tooltip" data-placement="top" title="Remove item from cart" onclick="@(() => RemoveFromCart(item.id))"><i class="bi bi-cart-x" style="font-size: 2rem;"></i></a>
                        <a href="" class="btn btn-light border px-3 pt-2 icon-hover mx-4" title="Add to wishlist"
                            data-product-id="@item.id"
                            data-product-image="@item.image"
                            data-product-name="@item.name"
                            data-product-price="@item.price"
                            onclick="addToWishlist(event)">
                            <i class="bi bi-heart text-danger " style="font-size: 2rem;"></i>
                        </a>
                    </div>
                </div>
            </div>
        </div>
    }
</div>
<div style="text-align: center;">
  <a @onclick="HandleCheckoutClick" class="btn btn-outline-danger" data-toggle="tooltip" data-placement="top" title="Checkout for Payment Options" style="max-width: 250px;"><i class="bi bi-bag-check" style="font-size: 2rem;"></i></a>
</div>


}
}

@code {
    private bool isRendered;
    private CartItem[] cartItems;

protected override async Task OnAfterRenderAsync(bool firstRender)
{
    var storage = await JSRuntime.InvokeAsync<IJSObjectReference>("eval", "localStorage");
    var json = await storage.InvokeAsync<string>("getItem", "cartItems");
    if (!string.IsNullOrEmpty(json))
    {
        cartItems = JsonSerializer.Deserialize<CartItem[]>(json);
    }
    else
    {
        cartItems = new CartItem[0];
    }
    isRendered = true;
    StateHasChanged();
}


    private class CartItem
    {
        public string id { get; set; }
        public string name { get; set; }
        public string price { get; set; }
        public string image { get; set; }
        public int quantity { get; set; }
        public string totalPrice { get; set; }
    }



    private async Task RemoveFromCart(string id)
{
    var cartItemsList = cartItems.ToList();
    var itemToRemove = cartItemsList.FirstOrDefault(x => x.id == id);
    if (itemToRemove != null)
    {
        cartItemsList.Remove(itemToRemove);
        cartItems = cartItemsList.ToArray();
        var storage = await JSRuntime.InvokeAsync<IJSObjectReference>("eval", "localStorage");
        await storage.InvokeVoidAsync("setItem", "cartItems", JsonSerializer.Serialize(cartItems));
    }
}

//checkout page opens only when the user is logged in else it will navigate the user to login registration page
private async Task HandleCheckoutClick()
{
    var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "token");
    if (string.IsNullOrEmpty(token))
    {
        var result = await JSRuntime.InvokeAsync<bool>("confirm", "Please login to your account");
        if (result)
        {
            NavigationManager.NavigateTo($"https://localhost:7085/?ClientId=a0d0b3a2-efa4-47ca-b193-45bdbd950f3a");
        }
    }
    else
    {
        NavigationManager.NavigateTo($"/checkout?token={token}");
    }
}




}





@* @page "/cart/{ProdId}"
@using Ecommerce.Models
@using Newtonsoft.Json;
@inject NavigationManager NavigationManager
@using System.Text.RegularExpressions;
@inject IHttpContextAccessor HttpContextAccessor

@if (Product != null)
{
    <div class="row">
      <div class="col-lg-3 col-md-6 col-sm-6 d-flex">
        <a href="@($"/details/{Product.ProdId}")">
          <div class="shadow-lg card w-100 my-2 shadow-2-strong">
            <img src="@Product.ImageURL" class="card-img-top" style="aspect-ratio: 1 / 1" />
            <div class="card-body d-flex flex-column">
              <h5 class="card-title">@Product.ProdName</h5>
              <p class="card-text">@Product.Price.ToString("c")</p>
              <div class="card-footer d-flex align-items-end pt-3 px-0 pb-0 mt-auto">
                <a href="#!" class="btn btn-light border px-3 pt-2 icon-hover mx-2" data-toggle="tooltip" data-placement="top" title="Remove item from cart"><i class="bi bi-cart-x" style="font-size: 2rem;"></i></a>
                <a href="#!" class="btn btn-light border px-3 pt-2 icon-hover mx-5" data-toggle="tooltip" data-placement="top" title="Add to wishlist"><i class="bi bi-heart text-danger " style="font-size: 2rem;"></i></a>
              </div>
              <button class="btn btn-outline-danger" data-toggle="tooltip" data-placement="top" title="Checkout for Payment Options"><i class="bi bi-bag-check" style="font-size: 2rem;">Checkout</i></button>
            </div>
          </div>
        </a>
      </div>
    </div>
}




@code{
  [Parameter]
public string ProdId { get; set; }
    public Products Product { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var id = Convert.ToInt32(Regex.Match(NavigationManager.Uri, @"\d+$").Value);
        Product = await GetProductById(id);
    }

    private async Task<Products> GetProductById(int id)
    {
        var baseUrl = "https://localhost:7044/api/products/";
        using (var httpClientHandler = new HttpClientHandler())
        {
            // httpClientHandler.ServerCertificateCustomValidationCallback = (message, cert, chain, errors) => { return true; }; // Below used as not all implementations support this callback, and some throw PlatformNotSupportedException.
            httpClientHandler.ServerCertificateCustomValidationCallback = HttpClientHandler.DangerousAcceptAnyServerCertificateValidator; // (NOT SECURE) connect to a server with a certificate that shouldn't be validated
            using (var httpClient = new HttpClient(httpClientHandler))
            {
                var jsonStr = await httpClient.GetStringAsync(baseUrl + id);
                var product = JsonConvert.DeserializeObject<Products>(jsonStr);
                return product;
            }
        }
    }
}

 *@



@* @page "/cart"
@using System.Text.Json
@inject IJSRuntime JSRuntime

@code{
    public Dictionary<string, CartItem> CartItems { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
{
    Console.WriteLine("Retrieving cart items...");
    var cartItemsJson = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "cartItems");

    Console.WriteLine($"Cart items JSON: {cartItemsJson}");

    if (!string.IsNullOrEmpty(cartItemsJson))
    {
        CartItems = JsonSerializer.Deserialize<Dictionary<string, CartItem>>(cartItemsJson);
    }
    else
    {
        CartItems = new Dictionary<string, CartItem>();
    }

    Console.WriteLine($"Cart items count: {CartItems.Count}");
}
catch (Exception ex)
{
    Console.WriteLine($"Error retrieving cart items: {ex.Message}");
    CartItems = new Dictionary<string, CartItem>();
}

StateHasChanged();
        }

    }

    public class CartItem
    {
        public string Id { get; set; }
        public string Image { get; set; }
        public string Name { get; set; }
        public decimal Price { get; set; }
        public int Quantity { get; set; }
    }
}

<table>
    <thead>
        <tr>
            <th>Image</th>
            <th>Name</th>
            <th>Price</th>
            <th>Quantity</th>
        </tr>
    </thead>
    <tbody>
    @if (CartItems != null)
    {
        @foreach (var cartItem in CartItems.Values)
        {
            <tr>
                <td><img src="@cartItem.Image" alt="@cartItem.Name" /></td>
                <td>@cartItem.Name</td>
                <td>@cartItem.Price</td>
                <td>@cartItem.Quantity</td>
            </tr>
        }
    }
</tbody>

</table>
 *@


