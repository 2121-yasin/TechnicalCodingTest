@page "/"
@using Ecommerce.Models
@using Newtonsoft.Json;
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
<PageTitle>Index</PageTitle>



@code{
    @* private string searchQuery; *@
    public List<Products> Product { get; set; }

@*
protected override async Task OnInitializedAsync()
{
    var uri = new Uri(NavigationManager.Uri);
    using (var httpClientHandler = new HttpClientHandler())
    {
       httpClientHandler.ServerCertificateCustomValidationCallback = HttpClientHandler.DangerousAcceptAnyServerCertificateValidator; // (NOT SECURE) connect to a server with a certificate that shouldn't be validated
    using (var httpClient = new HttpClient(httpClientHandler)){
    if (uri.Query.Contains("search="))
    {
        searchQuery = uri.Query.Split("=")[1];
        Product = await httpClient.GetFromJsonAsync<List<Products>>($"https://localhost:7044/api/products/search/{searchQuery}");
    }
    else
    {
        Product = await httpClient.GetFromJsonAsync<List<Products>>("https://localhost:7044/api/products/");
    }
    }
    }
*@
    protected override async Task OnInitializedAsync()
{
    //var productId = 1; // Replace with the ID of the product you want to display
    Product = await GetProduct();
}

private async Task<List<Products>> GetProduct()
{
    var baseUrl = "https://localhost:7044/api/products/";
    using (var httpClientHandler = new HttpClientHandler())
    {
        // httpClientHandler.ServerCertificateCustomValidationCallback = (message, cert, chain, errors) => { return true; }; // Below used as not all implementations support this callback, and some throw PlatformNotSupportedException.
        httpClientHandler.ServerCertificateCustomValidationCallback = HttpClientHandler.DangerousAcceptAnyServerCertificateValidator; // (NOT SECURE) connect to a server with a certificate that shouldn't be validated
        using (var httpClient = new HttpClient(httpClientHandler))
        {
            var jsonStr = await httpClient.GetStringAsync(baseUrl);
            var product = JsonConvert.DeserializeObject<List<Products>>(jsonStr);
            return product;
        }
    }
}

}


<div>
<div class="d-flex justify-content-center m-5 p-5">
    <div id="carouselExampleAutoplaying" class="carousel slide rounded-end" data-bs-ride="carousel">
        <div class="carousel-indicators">
            <button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="0" class="active"
                aria-current="true" aria-label="Slide 1"></button>
            <button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="1"
                aria-label="Slide 2"></button>
            <button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="2"
                aria-label="Slide 3"></button>
        </div>

        <div class="carousel-inner">
        
        @if (Product != null)
        {
            @foreach (var item in Product)
            {
              @if (item.ProdId == 1)
            {
                <div class="carousel-item active" data-bs-interval="2000">
                    <img src="@item.ImageURL" class="d-block w-100" style="max-width:800px; height: 400px;" />
                </div>
            }
            else if (item.ProdId == 2 || item.ProdId == 3)
            {
                <div class="carousel-item" data-bs-interval="2000">
                    <img src="@item.ImageURL" class="d-block w-100" style="max-width:800px; height: 400px;" />
                </div>
            }
            }
        }

    </div>


    <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleAutoplaying"
    data-bs-slide="prev">
    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
    <span class="visually-hidden">Previous</span>
    </button>
    <button class="carousel-control-next" type="button" data-bs-target="#carouselExampleAutoplaying"
    data-bs-slide="next">
        <span class="carousel-control-next-icon" aria-hidden="true"></span>
        <span class="visually-hidden">Next</span>
    </button>
    </div>
</div>
</div>



<section>
  <div class="container my-5">
    <header class="mb-4">
      <h3>New products</h3>
    </header>
@if (Product != null)
{
    <div class="row">
      @foreach (var product in Product)
      {
        <div class="col-lg-3 col-md-6 col-sm-6 d-flex">
          <a href="@($"/details/{product.ProdId}")">
            <div class="shadow-lg card w-100 my-2 shadow-2-strong">
              <img src="@product.ImageURL" class="card-img-top" style="aspect-ratio: 1 / 1" />
              <div class="card-body d-flex flex-column">
                <h5 class="card-title">@product.ProdName</h5>
                <p class="card-text">@product.Price.ToString("c")</p>
                <div class="card-footer d-flex align-items-end pt-3 px-0 pb-0 mt-auto">


<a href="" class="btn btn-light border px-3 pt-2 icon-hover mx-4" title="Add to cart"
  data-product-id="@product.ProdId"
  data-product-image="@product.ImageURL"
   data-product-name="@product.ProdName"
   data-product-price="@product.Price"
   onclick="addToCart(event)">
  <i class="bi bi-cart4 " style="font-size: 2rem;"></i>
</a>


           
                  @* <a href="" class="btn btn-light border px-3 pt-2 icon-hover mx-5" data-toggle="tooltip" data-placement="top" title="Add to wishlist"><i class="bi bi-heart text-danger " style="font-size: 2rem;"></i></a> *@
   <a href="" class="btn btn-light border px-3 pt-2 icon-hover mx-4" title="Add to wishlist"
  data-product-id="@product.ProdId"
  data-product-image="@product.ImageURL"
   data-product-name="@product.ProdName"
   data-product-price="@product.Price"
   onclick="addToWishlist(event)">
  <i class="bi bi-heart text-danger " style="font-size: 2rem;"></i>
</a>
                </div>
              </div>
            </div>
          </a>
        </div>
      }
    </div>
}

  </div>
</section>







